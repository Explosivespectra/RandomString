{"version":3,"sources":["theme.js","RandomString.js","App.js","reportWebVitals.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","RandomString","useState","removeString","setRemoval","currentSelected","setSelected","currentInput","setInput","Container","maxWidth","Grid","item","xs","TextField","value","onChange","event","target","multiline","rowsMax","FormControlLabel","control","Checkbox","checked","label","Button","onClick","replace","stringsToChoose","trim","split","chosenString","Math","floor","random","length","ind","indexOf","splice","concat","newString","join","variant","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAqBeA,EAjBDC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,MAEZC,WAAY,CACVC,QAAS,W,6DCmDAC,EA/DM,WAAO,IAAD,EAEYC,oBAAS,GAFrB,mBAEhBC,EAFgB,KAEFC,EAFE,OAGgBF,mBAAS,IAHzB,mBAGhBG,EAHgB,KAGCC,EAHD,OAIUJ,mBAAS,IAJnB,mBAIhBK,EAJgB,KAIFC,EAJE,KAyBvB,OACI,8BACI,cAACC,EAAA,EAAD,CAAWC,SAAU,KAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACA,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,UACI,0CACA,cAACC,EAAA,EAAD,CACIC,MAAOR,EACPS,SAAU,SAACC,GAAWT,EAASS,EAAMC,OAAOH,QAC5CI,UAAU,OACVC,QAAS,OAEjB,eAACT,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,UACI,0CACA,8BAAMR,OAEV,cAACM,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,cAACQ,EAAA,EAAD,CACIC,QACI,cAACC,EAAA,EAAD,CACAP,SAAU,SAACC,GAAWb,EAAWa,EAAMC,OAAOM,YAEtDC,MAAM,iDAGV,cAACd,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,cAACa,EAAA,EAAD,CAAQC,QA7CP,WACjB,GAA0D,KAAtDpB,EAAaqB,QAAQ,OAAO,IAAIA,QAAQ,MAAM,IAAa,CAC3D,IAAIC,EAAmBtB,EAAaqB,QAAQ,OAAO,KAAKE,OAAOC,MAAM,QACjEC,EAAeH,EAAgBI,KAAKC,MAAMD,KAAKE,SAAWN,EAAgBO,SAC1EC,EAAMR,EAAgBS,QAAQN,GAClCH,EAAgBU,OAAOF,EAAK,GAC5B/B,EAAaD,EAAgBmC,OAAO,KAAMA,OAAOR,IACjD,IAAIS,EAAYZ,EAAgBa,KAAK,KACjCvC,GACAK,EAASiC,KAoC8BE,QAAQ,WAAvC,wCAEJ,cAAChC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,cAACa,EAAA,EAAD,CAAQC,QAlCd,WACVnB,EAAS,IACTF,EAAY,KAgC4BqC,QAAQ,WAAhC,8CC5CTC,EAPH,kBACV,eAACC,EAAA,EAAD,CAAevD,MAAOA,EAAtB,UACE,cAACwD,EAAA,EAAD,IACA,cAAC,EAAD,QCEWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.14e4887f.chunk.js","sourcesContent":["import { red } from \"@material-ui/core/colors\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#556cd6\",\r\n    },\r\n    secondary: {\r\n      main: \"#19857b\",\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: \"#fff\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;","import React, {useState} from \"react\";\r\nimport {TextField, Checkbox, Button, FormControlLabel, Paper, Grid, Container} from \"@material-ui/core\"\r\n\r\n\r\nconst RandomString = () => {\r\n\r\n    const [removeString, setRemoval] = useState(false);\r\n    const [currentSelected, setSelected] = useState(\"\");\r\n    const [currentInput, setInput] = useState(\"\");\r\n\r\n    const chooseString = () => {     \r\n        if (currentInput.replace(/\\n/gi,\"\").replace(/ /gi,\"\") !== \"\" ) {\r\n            var stringsToChoose = (currentInput.replace(/\\n/gi,\" \").trim().split(/[ ]+/));\r\n            var chosenString = stringsToChoose[Math.floor(Math.random() * stringsToChoose.length)];\r\n            var ind = stringsToChoose.indexOf(chosenString);\r\n            stringsToChoose.splice(ind, 1);\r\n            setSelected((currentSelected.concat(\" \")).concat(chosenString));\r\n            var newString = stringsToChoose.join(\" \");\r\n            if (removeString) {\r\n                setInput(newString);\r\n            }\r\n        }\r\n    }\r\n\r\n    const clear = () => {\r\n        setInput(\"\");\r\n        setSelected(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container maxWidth={'xs'}>\r\n                <Grid>\r\n                    <Grid item xs={12}>\r\n                        <div>Input: </div>\r\n                        <TextField\r\n                            value={currentInput}\r\n                            onChange={(event) => {setInput(event.target.value)}}\r\n                            multiline=\"true\"\r\n                            rowsMax={5}/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div>Output:</div>\r\n                        <div>{currentSelected}</div>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                onChange={(event) => {setRemoval(event.target.checked)}}/>\r\n                        }\r\n                        label=\"Remove string from input box when selected\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button onClick={chooseString} variant=\"outlined\">Choose String From Input</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button onClick={clear} variant=\"outlined\">Clear Input and Output</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default RandomString;","\nimport './App.css';\nimport CssBaseline from \"@material-ui/core/Cssbaseline\"\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./theme\"\nimport RandomString from \"./RandomString\"\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <RandomString />\n  </ThemeProvider>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}